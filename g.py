import asyncio
import random
import aiosqlite
import pytz
import os
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
TOKEN = os.getenv("TOKEN") # üîπ —Ç–æ–∫–µ–Ω
ADMIN_ID = int(os.getenv("ADMIN_ID")) # üîπ —Ç–≤–æ–π Telegram ID
TIMEZONE = pytz.timezone("Asia/Almaty")  # –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω—Å–∫–æ–µ –≤—Ä–µ–º—è

bot = Bot(token=TOKEN)
dp = Dispatcher()

# === –°–û–ó–î–ê–ù–ò–ï –ë–î ===
async def init_db():
    async with aiosqlite.connect("database.db") as db:
        await db.execute("""CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY
        )""")
        await db.execute("""CREATE TABLE IF NOT EXISTS progress (
            user_id INTEGER,
            date TEXT,
            chapter TEXT,
            read INTEGER DEFAULT 0
        )""")
        await db.execute("""CREATE TABLE IF NOT EXISTS daily (
            date TEXT PRIMARY KEY,
            chapter TEXT
        )""")
        await db.commit()


# === –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ===
def get_random_chapter():
    with open("bible_chapters.txt", "r", encoding="utf-8") as f:
        chapters = [line.strip() for line in f.readlines() if line.strip()]
    return random.choice(chapters)


async def get_today_chapter():
    today = datetime.now(TIMEZONE).strftime("%Y-%m-%d")
    async with aiosqlite.connect("database.db") as db:
        async with db.execute("SELECT chapter FROM daily WHERE date=?", (today,)) as cur:
            row = await cur.fetchone()
            if row:
                return row[0]
        chapter = get_random_chapter()
        await db.execute("INSERT INTO daily (date, chapter) VALUES (?, ?)", (today, chapter))
        await db.commit()
        return chapter


def get_read_button():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –ü—Ä–æ—á–∏—Ç–∞–ª", callback_data="read")]
    ])


# === –ö–û–ú–ê–ù–î–ê /start ===
@dp.message(Command("start"))
async def start(message: types.Message):
    async with aiosqlite.connect("database.db") as db:
        await db.execute("INSERT OR IGNORE INTO users (user_id) VALUES (?)", (message.from_user.id,))
        await db.commit()

    chapter = await get_today_chapter()
    await message.answer(
        f"üëã –ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!\n\n"
        f"üìñ –ì–ª–∞–≤–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n<b>{chapter}</b>",
        reply_markup=get_read_button(),
        parse_mode="HTML"
    )


# === –ö–ù–û–ü–ö–ê '–ü–†–û–ß–ò–¢–ê–õ' ===
@dp.callback_query(lambda c: c.data == "read")
async def mark_read(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    today = datetime.now(TIMEZONE).strftime("%Y-%m-%d")
    chapter = await get_today_chapter()

    async with aiosqlite.connect("database.db") as db:
        await db.execute("""
            INSERT OR REPLACE INTO progress (user_id, date, chapter, read)
            VALUES (?, ?, ?, 1)
        """, (user_id, today, chapter))
        await db.commit()

    await callback.answer("–û—Ç–º–µ—á–µ–Ω–æ ‚úÖ")
    await callback.message.edit_reply_markup(None)


# === –û–¢–ü–†–ê–í–ö–ê –ì–õ–ê–í–´ –í–°–ï–ú ===
async def send_daily_chapter():
    chapter = await get_today_chapter()
    async with aiosqlite.connect("database.db") as db:
        async with db.execute("SELECT user_id FROM users") as cur:
            users = await cur.fetchall()

    for (user_id,) in users:
        try:
            await bot.send_message(
                user_id,
                f"üìñ –ì–ª–∞–≤–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n<b>{chapter}</b>",
                reply_markup=get_read_button(),
                parse_mode="HTML"
            )
        except Exception:
            pass


# === –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–Ø (9:00, 10:00) ===
async def send_reminders(hour):
    today = datetime.now(TIMEZONE).strftime("%Y-%m-%d")
    async with aiosqlite.connect("database.db") as db:
        async with db.execute("""
            SELECT user_id FROM users
            WHERE user_id NOT IN (
                SELECT user_id FROM progress WHERE date=? AND read=1
            )
        """, (today,)) as cur:
            users = await cur.fetchall()

    for (user_id,) in users:
        try:
            await bot.send_message(
                user_id,
                f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ {hour}:00!\n"
                f"–ù–µ –∑–∞–±—É–¥—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Å–µ–≥–æ–¥–Ω—è—à–Ω—é—é –≥–ª–∞–≤—É üôè",
                reply_markup=get_read_button()
            )
        except Exception:
            pass


# === –ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–¨ ===
def admin_panel():
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–ª–∞–≤—É —Å–µ–π—á–∞—Å", callback_data="admin_send")],
        [InlineKeyboardButton(text="üîÅ –°–º–µ–Ω–∏—Ç—å –≥–ª–∞–≤—É", callback_data="admin_change")],
        [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")],
        [InlineKeyboardButton(text="üìñ –ö—Ç–æ –ø—Ä–æ—á–∏—Ç–∞–ª", callback_data="admin_readers")],
        [InlineKeyboardButton(text="üìï –ö—Ç–æ –Ω–µ –ø—Ä–æ—á–∏—Ç–∞–ª", callback_data="admin_notread")]
    ])
    return kb


@dp.message(Command("admin"))
async def admin_menu(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return await message.answer("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
    await message.answer("‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=admin_panel())


# === –û–ë–†–ê–ë–û–¢–ö–ê –ö–ù–û–ü–û–ö –ê–î–ú–ò–ù–ê ===
@dp.callback_query(lambda c: c.data.startswith("admin_"))
async def admin_actions(callback: types.CallbackQuery):
    if callback.from_user.id != ADMIN_ID:
        return await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")

    action = callback.data.split("_")[1]

    # üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–ª–∞–≤—É —Å–µ–π—á–∞—Å
    if action == "send":
        await send_daily_chapter()
        await callback.answer("‚úÖ –ì–ª–∞–≤–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤—Å–µ–º")
        await callback.message.edit_text("üì§ –ì–ª–∞–≤–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.", reply_markup=admin_panel())

    # üîÅ –°–º–µ–Ω–∏—Ç—å –≥–ª–∞–≤—É
    elif action == "change":
        chapter = get_random_chapter()
        today = datetime.now(TIMEZONE).strftime("%Y-%m-%d")
        async with aiosqlite.connect("database.db") as db:
            await db.execute("INSERT OR REPLACE INTO daily (date, chapter) VALUES (?, ?)", (today, chapter))
            await db.commit()
        await callback.answer("üîÅ –ì–ª–∞–≤–∞ –∏–∑–º–µ–Ω–µ–Ω–∞")
        await callback.message.edit_text(f"üîÅ –ù–æ–≤–∞—è –≥–ª–∞–≤–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è: <b>{chapter}</b>", parse_mode="HTML", reply_markup=admin_panel())

    # üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    elif action == "stats":
        today = datetime.now(TIMEZONE).strftime("%Y-%m-%d")
        async with aiosqlite.connect("database.db") as db:
            async with db.execute("SELECT COUNT(*) FROM users") as cur:
                total = (await cur.fetchone())[0]
            async with db.execute("SELECT user_id FROM progress WHERE date=? AND read=1", (today,)) as cur:
                readers = await cur.fetchall()

        read_count = len(readers)
        text = f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ {today}</b>\n\n" \
               f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total}\n" \
               f"‚úÖ –ü—Ä–æ—á–∏—Ç–∞–ª–∏ –≥–ª–∞–≤—É: {read_count}\n\n"

        if readers:
            text += "<b>–°–ø–∏—Å–æ–∫ –ø—Ä–æ—á–∏—Ç–∞–≤—à–∏—Ö:</b>\n"
            for (user_id,) in readers:
                try:
                    user = await bot.get_chat(user_id)
                    name = user.full_name
                    username = f"(@{user.username})" if user.username else ""
                    text += f"‚Ä¢ {name} {username}\n"
                except Exception:
                    text += f"‚Ä¢ ID: {user_id}\n"
        else:
            text += "‚ùå –°–µ–≥–æ–¥–Ω—è –ø–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –ø—Ä–æ—á–∏—Ç–∞–ª –≥–ª–∞–≤—É."

        await callback.answer()
        await callback.message.edit_text(text, parse_mode="HTML", reply_markup=admin_panel())

    # üìñ –ö—Ç–æ –ø—Ä–æ—á–∏—Ç–∞–ª
    elif action == "readers":
        today = datetime.now(TIMEZONE).strftime("%Y-%m-%d")
        async with aiosqlite.connect("database.db") as db:
            async with db.execute("SELECT user_id FROM progress WHERE date=? AND read=1", (today,)) as cur:
                users = await cur.fetchall()

        text = "‚úÖ –ü—Ä–æ—á–∏—Ç–∞–ª–∏ –≥–ª–∞–≤—É —Å–µ–≥–æ–¥–Ω—è:\n\n" if users else "‚ùå –°–µ–≥–æ–¥–Ω—è –Ω–∏–∫—Ç–æ –Ω–µ –ø—Ä–æ—á–∏—Ç–∞–ª."
        for (user_id,) in users:
            try:
                user = await bot.get_chat(user_id)
                name = user.full_name
                username = f"(@{user.username})" if user.username else ""
                text += f"‚Ä¢ {name} {username}\n"
            except Exception:
                text += f"‚Ä¢ ID: {user_id}\n"

        await callback.answer()
        await callback.message.edit_text(text, parse_mode="HTML", reply_markup=admin_panel())

    # üìï –ö—Ç–æ –Ω–µ –ø—Ä–æ—á–∏—Ç–∞–ª
    elif action == "notread":
        today = datetime.now(TIMEZONE).strftime("%Y-%m-%d")
        async with aiosqlite.connect("database.db") as db:
            async with db.execute("""
                SELECT user_id FROM users
                WHERE user_id NOT IN (
                    SELECT user_id FROM progress WHERE date=? AND read=1
                )
            """, (today,)) as cur:
                users = await cur.fetchall()

        text = "üìï –ù–µ –ø—Ä–æ—á–∏—Ç–∞–ª–∏ –≥–ª–∞–≤—É —Å–µ–≥–æ–¥–Ω—è:\n\n" if users else "üéâ –í—Å–µ —Å–µ–≥–æ–¥–Ω—è –ø—Ä–æ—á–∏—Ç–∞–ª–∏!"
        for (user_id,) in users:
            try:
                user = await bot.get_chat(user_id)
                name = user.full_name
                username = f"(@{user.username})" if user.username else ""
                text += f"‚Ä¢ {name} {username}\n"
            except Exception:
                text += f"‚Ä¢ ID: {user_id}\n"

        await callback.answer()
        await callback.message.edit_text(text, parse_mode="HTML", reply_markup=admin_panel())


# === –ü–õ–ê–ù–ò–†–û–í–©–ò–ö ===
async def scheduler():
    while True:
        now = datetime.now(TIMEZONE)
        times = [
            now.replace(hour=8, minute=0, second=0, microsecond=0),
            now.replace(hour=9, minute=0, second=0, microsecond=0),
            now.replace(hour=10, minute=0, second=0, microsecond=0),
        ]

        if now > times[-1]:
            next_run = times[0] + timedelta(days=1)
            await asyncio.sleep((next_run - now).total_seconds())
            continue

        for i, target in enumerate(times):
            if now < target:
                await asyncio.sleep((target - datetime.now(TIMEZONE)).total_seconds())
                if i == 0:
                    await send_daily_chapter()
                else:
                    await send_reminders(hour=target.hour)


# === –ó–ê–ü–£–°–ö ===
async def main():
    await init_db()
    asyncio.create_task(scheduler())
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
